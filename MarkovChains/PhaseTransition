# -*- coding: utf-8 -*-
"""
Created on Wed Feb 27 19:16:59 2019

@author: Temporary
"""

from Torpid_Mixing import random_walk
import networkx as nx
import matplotlib.pyplot as plt
import random
import numpy as np

def initialize_graph(size, p):
    grid = nx.grid_graph( [size, size])
    for x in grid.nodes():
        if x[1] < p*size : 
            grid.node[x]["vote"] = 0
        else:
            grid.node[x]["vote"] = 1
        if x[0] < size/2:
            grid.node[x]["district"] = 0
        else:
            grid.node[x]["district"] = 1
    return grid

def check_connected(grid):
    district_zero = []
    district_one = []
    for x in grid.nodes():
        if grid.node[x]["district"] == 0:
            district_zero.append(x)
        else:
            district_one.append(x)
    dist_zero_graph = nx.subgraph(grid, district_zero)
    dist_one_graph = nx.subgraph(grid, district_one)
    if not nx.is_connected(dist_one_graph):
        return False
    if not nx.is_connected(dist_zero_graph):
        return False
    return True

def step(grid):
    x = random.choice(list(grid.nodes()))
    old = grid.node[x]["district"]
    
    grid.node[x]["district"] = 1 - old
    if check_connected(grid):
        return grid
    else:
        grid.node[x]["district"] = old
    return grid

def cut_size(grid):
    district_zero = []
    district_one = []
    for x in grid.nodes():
        if grid.node[x]["district"] == 0:
            district_zero.append(x)
        else:
            district_one.append(x)
            
        
    return len(nx.edge_boundary(grid, district_zero, district_one))
    
    
def vote(grid):
    district_zero = []
    district_one = []
    for x in grid.nodes():
        if grid.node[x]["district"] == 0:
            district_zero.append(x)
        else:
            district_one.append(x)
    seats = []
    tally = 0
    for x in district_zero:
        if grid.node[x]["vote"] == 1:
            tally += 1
        else:
            tally += -1
    seats.append(np.sign(tally))        
    tally = 0
    for x in district_one:
        if grid.node[x]["vote"] == 1:
            tally += 1
        else:
            tally += -1
    seats.append(np.sign(tally))        
    
    return seats

def viz(graph):
    for x in graph.nodes():
        graph.node[x]["pos"] = x
    values = [graph.node[x]["district"] for x in graph.nodes()]
    nx.draw(graph, pos=nx.get_node_attributes(graph, 'pos'), node_size = 10, width = .5, cmap=plt.get_cmap('jet'), node_color=values)
    
grid = initialize_graph(30,.6)
votes = []
for i in range(1000):
    grid = step(grid)
    if (i % 1000):
        votes.append(vote(grid))

#viz(grid)
parameter = .1
grid = initialize_graph(20,.6)
votes = []
undids = 0
for i in range(100000):
    old_cut = cut_size(grid)
    new_grid = step(grid)
    new_cut = cut_size(new_grid)
    if new_cut > old_cut:
        p = random.uniform(0,1)
        cut_off = parameter** ( new_cut - old_cut)
        if p > cut_off:
            undids += 1
            new_grid = grid
    grid = new_grid
    
    if (i % 1000):
        votes.append(vote(grid))
        
viz(grid)
