#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sat Sep 28 15:38:41 2019

This calculates the number of subpolynomials of a given boolean polynomial. 
Polynomials are encoded as a collection of subsets of a ground set [n].

@author: lnajt
"""

import random
import copy
import numpy as np
import itertools
def random_poly(n = 10, m = 3, d = 5):
    '''
    this creates a random boolean polynomial, stored as a frozenset of terms / monomials
    each monomial is stored as frozen set of the variables that appear in it.
    
    n is the number of variables
    m is the number of terms
    d is the degree of the term
    '''

    ground_set = set(range(n))
    terms = set([])
    
    for k in range(m):
        pre_term = random.sample(ground_set,d)
        pre_term.sort()
        term = frozenset(pre_term)
        terms.add(term)
    
    polynomial = frozenset(terms)
    return(polynomial)
    
    
    
def mod2(term_list):
    '''
    takes a list of terms, and returns the set of terms that appear
    an odd number of times.
    '''
    
    terms = set(term_list)
    odd_terms = set([])
    for q in terms:
        if len([x for x in term_list if x == q]) % 2 == 1:
            odd_terms.add(q)
            
    return odd_terms

def compute_subpoly(polynomial, n, use_mod2 = True):
    '''
    the subpolynomials as the polynomials that could be obtained by partial evaluations at the first m variables, 0 <= m <= n.
    
    For example, the subpolynomials of x_1x_2...x_n are just x_1x_2...x_n, x_2...x_n, x_k...x_n,  1 and 0.
    
    n is the number of variables 
    
    TODO: Could be improved if you calculate $n$ as the max appearing variable
    '''

    subpolys = set([])
    subpolys.add(polynomial)
    list_of_subs = [ set( [polynomial])]
    for i in range(n):
        new_polys = set([])
        
        #i set to 0 phase:
        for q in list_of_subs[i]:
            new_q = set([])
            for t in q:
                if i not in t:
                    new_q.add(t)
            new_q = frozenset(new_q)
            new_polys.add(new_q)
        
        #i set to 1 phase:
        for q in list_of_subs[i]:
            new_q = []
            for t in q:
                if i not in t:
                    new_q.append(t)
                if i in t:
                    t_new = set(copy.deepcopy(t))
                    t_new.remove(i)
                    t_new = frozenset(t_new)
                    new_q.append(t_new)
            
            if use_mod2 == True:
                new_q = mod2(new_q)        
            new_q = frozenset(new_q)
            new_polys.add(new_q)
        #print("step:" + str(new_polys) + "\n")
        #subpolys = subpolys.union(new_polys)
        list_of_subs.append(new_polys)
        
    subpoly = subpolys.union(*list_of_subs)
    #print(subpoly)
    #print(len(subpoly))
    
    return len(subpoly)

def test():
    '''
    Some tests to make sure that the subpolynomial routine works.
    
    These can be compared to subpolynomial counts done by hand using a binary evaluation tree.
    To calculate by hand:
    each level of the tree corresponds to evaluting the next variable: the left child sets it to zero, and the right child to one.
    
    '''
    n = 3
    values = list(range(n))
    poly = frozenset([frozenset( values)])
    compute_subpoly(poly, n)
    
    #$x_0x_1 + x_1x_2$ -- important to check Mod2 Stuff
    
    poly = frozenset([frozenset( [0,1]), frozenset([1,2])])
    compute_subpoly(poly, n)
    
    n =6
    poly = frozenset([frozenset( [0,1,3]), frozenset([1,2,3])])
    compute_subpoly(poly, n)
    
    
def sum_of_monomials(n = 5, d = 2):

    variables = list(range(n))
    terms = itertools.combinations(variables, d)
    
    poly_terms = set([])
    for term in terms:
        poly_terms.add(frozenset(term))
    
    polynomial = frozenset(poly_terms)
    
    return polynomial
    
def experiment():
    '''
    calculating how many subpolynomials a random polynomial has
    '''
    print("warning: this uses a lot of memory")
    n = 20
    for m in range(1,20,1):
        d = 12
        list_of_counts = []
        for k in range(2):
            poly = random_poly(n,m,d)
            list_of_counts.append((compute_subpoly(poly, n)))
        print("at m: " +  str(m) + " counts: ", np.mean(list_of_counts))
        
def experiment_2():
    n = 10
    for n in range(4,15):
        list_of_counts = []
        for d in range(0,n+1):
            poly = sum_of_monomials(n,d)
            list_of_counts.append((compute_subpoly(poly, n)))
        
        print(list_of_counts)


    for n in range(4,15):
        list_of_counts = []
        for d in range(0,n+1):
            poly = sum_of_monomials(n,d)
            list_of_counts.append((compute_subpoly(poly, n, False)))
        
        print(list_of_counts)
