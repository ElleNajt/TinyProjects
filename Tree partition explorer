#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 27 15:20:30 2018

@author: lnajt
"""
import random
import networkx as nx
import math
import copy
import os
from itertools import chain, combinations
import matplotlib.pyplot as plt
import numpy as np
import pickle
from pathlib import Path as FilePath
    
import matplotlib.animation


#Got this code from stack exchange:
def powerset(iterable):
    """
    powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)
    """
    xs = list(iterable)
    # note we return an iterator rather than a list
    return chain.from_iterable(combinations(xs,n) for n in range(len(xs)+1))

alphabet = [0,1]

#levels = 2
#strings = [str(x) for x in alphabet]
#strings.append ( '')
#current_level = [str(x) for x in alphabet]
#for level in range(2):
#    next_level = [ t + str(x) for x in alphabet for t in current_level]
#    strings = strings + next_level
#    current_level = next_level
#
#G = nx.prefix_tree(strings)[0]

def add_level_data(tree):
    roots = []
    for n in tree.nodes():
        if tree.degree(n) == 2:
            roots.append(n)
            tree.graph["root"] = roots[0]
    wet_set = set([roots[0]])
    dry_set = set()
    level = 0
    while wet_set != set():
        new_wets = set()
        for node in wet_set:
            dry_set.add(node)
            tree.nodes[node]["level"] = level
            neighbors = tree.neighbors(node)
            for n in neighbors:
                if n not in dry_set:
                    new_wets.add(n)
        level += 1
        wet_set = new_wets
    return tree

def construct_doubled_tree(k  = 3):
    G = nx.balanced_tree(2,k)
    H = nx.balanced_tree(2,k)
    G = add_level_data(G)
    H = add_level_data(H)
    G_leaves = []
    for x in G.nodes:
        if G.degree(x) == 1:
           G_leaves.append(x)
    H_leaves = []
    for x in H.nodes:
        if H.degree(x) == 1:
            H_leaves.append(x)
        H.node[x]["half"] = "H"
    
    G_not_leaves = []
    for y in G.nodes():
        if y not in G_leaves:
            G_not_leaves.append(y)
    
    nodes_to_add = [str(y) + "G" for y in G_not_leaves]
    H.add_nodes_from(nodes_to_add)
    for n in G_not_leaves:
        H.node[str(n) + "G"]["level"] = G.node[n]["level"]
        H.node[str(n) + "G"]["half"] = "G"
    
    for y in G_not_leaves:
        for x in G.neighbors(y):
            if x in G_leaves:
                H.add_edge( x, str(y) + "G")
            else:
                H.add_edge(str(x) + "G", str(y) + "G")
    H.graph["depth"] = k
    H.name = "doubled_tree"
    roots = [H.graph["root"], str(G.graph["root"]) + "G"]
    H.graph["roots"] = roots
    return H

def build_metagraph_for_doubled_tree(k = 1):
    

    H = construct_doubled_tree(k)
    
    
    feasible_points = powerset(H.nodes)
    metagraph_points = []
    nodes = set(H.nodes)
    n = len(nodes)
    for x in feasible_points:
        if len(x) < math.ceil(n/2):
            xtemp = set(x)
            if xtemp != set():
                y = nodes - xtemp
                if y != set():
                    A = nx.subgraph(H, x)
                    B = nx.subgraph(H, y)
                    if nx.is_connected(A) and nx.is_connected(B):
                        metagraph_points.append(frozenset(xtemp))
                        #Choice to store point sin the metagraph by the set of the first block
        if len(x) == n/2:
            if 0 in x:
                #As a way to throw away half of them...
                xtemp = set(x)
                if xtemp != set():
                    y = nodes - xtemp
                    if y != set():
                        A = nx.subgraph(H, x)
                        B = nx.subgraph(H, y)
                        if nx.is_connected(A) and nx.is_connected(B):
                            metagraph_points.append(frozenset(xtemp))
                            #Choice to store point sin the metagraph by the set of the first block
    metagraph = nx.Graph()
    metagraph.add_nodes_from(metagraph_points)
    
    metagraph.add_node( frozenset())
    #metagraph.add_node( frozenset(nodes))
    for x in metagraph.nodes():
        for y in metagraph.nodes():
            if len(x - y) + len(y - x) == 1:
                metagraph.add_edge(frozenset(x), frozenset(y))
    return [metagraph, H]

def get_neighbors(nodes, subset):
    #returns the n neighbors in the hypercube.
    neighbors = []
    for x in nodes:
        if x in subset:
            new_set = copy.deepcopy(subset)
            new_set.remove(x)
            neighbors.append(frozenset(new_set))
        if x not in subset:
            new_set = copy.deepcopy(subset)
            new_set.add(x)
            neighbors.append(frozenset(new_set))
    return neighbors
            
def random_walk(graph, length):
    path = []
    current = frozenset(graph.nodes())
    graph_size = len(current)
    nodes = set(graph.nodes())
    path.append(current)
    for i in range(length):
        neighbors = get_neighbors(nodes, set(current))
        legal_neighbors = []
        for n in neighbors:
            if len(n) != 0 and len(n) != graph_size:
                y = nodes - n
                A = nx.subgraph(graph, n)
                B = nx.subgraph(graph, y)
                if nx.is_connected(A) and nx.is_connected(B):
                    legal_neighbors.append(n)
            else:
                legal_neighbors.append(n)
        
        current = random.choice(legal_neighbors)
        path.append(current)
    return path
                
def build_metagraph_BFS(graph):
    ##Since the metagraph is growing MUCH slower than 2^{2^k}, a BFS should be able to build it more efficiently
    wet_set = set()
    nodes = set(graph.nodes())
    dry_set = set()
    wet_set.add(frozenset(graph.nodes))
    seen_set = wet_set.union( dry_set)
    edges = []
    while wet_set != set():
        new_wets = set()
        for processing_set in wet_set:
            neighbors = get_neighbors(nodes, set(processing_set))
            for n in neighbors:
                if n not in seen_set:
                    y = nodes - n
                    A = nx.subgraph(graph, n)
                    B = nx.subgraph(graph, y)
                    if len(A) == 0 or len(B) == 0:
                        new_wets.add(n)
                        edges.append((frozenset(processing_set),frozenset(n)) )
                    else:
                        if nx.is_connected(A) and nx.is_connected(B):
                            new_wets.add(n)
                            edges.append((frozenset(processing_set),frozenset(n)) )
        wet_set = new_wets
        seen_set = seen_set.union(wet_set)
    
    nodes = [frozenset(x) for x in seen_set]
    metagraph = nx.Graph()
    metagraph.add_edges_from(edges)
    return metagraph

def down_neighbors(nodes, subset):
    #returns the n neighbors that come by removing an element
    neighbors = []
    for x in nodes:
        if x in subset:
            new_set = copy.deepcopy(subset)
            new_set.remove(x)
            neighbors.append(frozenset(new_set))
    return neighbors
            
def assign_heights(T,k):
    #this is to make T easier to visualize
    roots = T.graph["roots"]
    for x in T.nodes:
        T.node[x]["touched"] = False
    root = roots[0]
    T.node[root]["Y"] = k
    T.node[root]["X"] = 0
    T.node[root]["touched"] = True
    level = k
    wet_set = set()
    wet_set.add(root)
    while level > 0:
        level += -1
        new_wets = set()
        for point in wet_set:
            sign = 1
            neighbors = list(T.neighbors(point))
            for n in neighbors:
                if T.node[n]["touched"] == False:
                    T.node[n]["touched"] = True
                    if level >= 0:
                        T.node[n]["X"] = T.node[point]["X"] + sign * (1/2)**( k - T.node[point]["Y"] )
                        sign = -1 * sign
                        T.node[n]["Y"] = level
                        new_wets.add(n)
        wet_set = new_wets                    
            
    root = roots[1]
    T.node[root]["Y"] = -1* k
    T.node[root]["X"] = 0
    T.node[root]["touched"] = True
    wet_set = set()
    wet_set.add(root)
    level = k
    while level > 0:
        level += -1
        new_wets = set()
        for point in wet_set:
            sign = 1
            neighbors = T.neighbors(point)
            for n in neighbors:
                if T.node[n]["touched"] == False:
                    T.node[n]["touched"] = True
                    if T.node[point]["Y"] < 0:
                        T.node[n]["X"] = T.node[point]["X"] + sign * (1/2)**( k + T.node[point]["Y"] )
                        sign = -1 * sign
                        T.node[n]["Y"] = T.node[point]["Y"] + 1
                        new_wets.add(n)
        wet_set = new_wets
    return T
                        
                        
def just_count(graph, f1):
    #It's too large to keep in memory for k = 4.
    #Instead we observe that if we start from the $G$, then we only need to keep track of the wet set
    
    #There is already something interesting in the fact that this works ... because it says that we never need to go down and then back up to cover the set
    wet_set = set()
    nodes = set(graph.nodes())
    wet_set.add(frozenset(graph.nodes))
    size = 1
    len_new_wets = 1
    while wet_set != set():
        boundary_size = 0
        new_wets = set()
        for processing_set in wet_set:
            neighbors = down_neighbors(nodes, set(processing_set))
            for n in neighbors:
                y = nodes - n
                A = nx.subgraph(graph, n)
                B = nx.subgraph(graph, y)
                if len(A) > 0:
                    if nx.is_connected(A) and nx.is_connected(B):
                        boundary_size += 1
                        new_wets.add(n)
        old_len = len_new_wets
        len_new_wets = len(new_wets)
        #We computed the edges and new nodes right below the current level ... those are new_wets
        #print("level size: ", len_new_wets, "size so far: ", size , " boundary_edges: ", boundary_size, "ratio: ", boundary_size / size, "difference :", len_new_wets - old_len, file = f1)
        print("level size: ", len_new_wets, "size so far: ", size , " boundary_edges: ", boundary_size, "ratio: ", boundary_size / size, "difference :", len_new_wets - old_len)
        size += len_new_wets
        wet_set = new_wets
    
    size += 1
    #To account for the empty partition
    return size


#M, T = build_metagraph_for_doubled_tree(3)
#len(M)

def make_histogram(list_of_samples):
    values = {}
    for sample in list_of_samples:
        values[sample] = 0
    for sample in list_of_samples:
        values[sample] += 1
    return values

def reload_path(size, steps, graph):
    name = str(graph.name) + "path_for_size" + str(size) + "steps" + str(steps)
    with open(name, "rb") as fp:   # Unpickling
        path = pickle.load(fp)
    return path

def make_path(size, steps, graph = 0):
    #First check to see if there is a file 
    if graph == 0:
        T = construct_doubled_tree(size)
    else:
        T = graph
    name = str(T.name) + "path_for_size" + str(size) + "steps" + str(steps)
    mydir = os.curdir
    filename = os.path.join(mydir, name)
    myfile = FilePath(filename)

    if myfile.is_file():
        print("found in directory")
        return reload_path(size, steps, T), T

    #T = assign_heights(T,2)
    path = random_walk(T, steps)

    with open(name, "wb") as fp:
        pickle.dump(path, fp)
    return path, T

def depth_weighted(n):
    running_sum = 0
    for x in n:
        running_sum += T.node[x]["level"]
    return running_sum

def middle(n):
    running_sum = 0
    for x in n:
        if T.node[x]["level"] == k:
            running_sum += 1
    return running_sum

def balance(n):
    #ignores middle, returns balance ratio between top and bottom halves
    #The intuition for this is to find a bottleneck similar to that describes for independent sets in Jerrum chapter 7...
    running_sum = 0
    for x in n:
        if T.node[x]["level"] != T.graph["depth"]:
            if T.node[x]["half"] == "H":
                running_sum += 1
            if T.node[x]["half"] == "G":
                running_sum += -1
    return running_sum

def weighted_balance(n):
    running_sum = 0
    for x in n:
        weight = 10**(k - T.node[x]["level"])
        if T.node[x]["level"] != T.graph["depth"]:
            if T.node[x]["half"] == "H":
                running_sum += weight
            if T.node[x]["half"] == "G":
                running_sum += -1 * weight
    return running_sum

def top_bottom(n):
    running_sum = 0
    for x in n:
        if T.node[x]["level"] == 0:
            if T.node[x]["half"] == "H":
                running_sum += 1
            if T.node[x]["half"] == "G":
                running_sum += -10
    return running_sum
def make_time_series(path, function = len):

    lengths = [function(x) for x in path]
    x_values = list(range(len(path)))
    plt.scatter(x_values, lengths)
    plt.show()

def make_hist(path, function = len):
    hist = make_histogram([function(x) for x in path])

    plt.bar(list(hist.keys()), hist.values(), color='g')
    plt.show()
    
    
def viz(T,k,n):
    T = assign_heights(T,k)
    for x in T.nodes():
        T.node[x]["pos"] = [T.node[x]["X"], T.node[x]["Y"]]
    for x in T.nodes():
        if x in n:
            T.node[x]["col"] = 1
        else:
            T.node[x]["col"] = 0
    values = [T.node[x]["col"] for x in T.nodes()]
    nx.draw(T, pos=nx.get_node_attributes(T, 'pos'), node_size = 200/k, width = .5, cmap=plt.get_cmap('jet'), node_color=values)
    

def update(num):
    ax.clear()

    for x in T.nodes():
        T.node[x]["pos"] = [T.node[x]["X"], T.node[x]["Y"]]
    for x in T.nodes():
        if x in path[num]:
            T.node[x]["col"] = 1
        else:
            T.node[x]["col"] = 0
    values = [T.node[x]["col"] for x in T.nodes()]
    nx.draw(T, pos=nx.get_node_attributes(T, 'pos'), node_size = 200/k, width = .5, cmap=plt.get_cmap('jet'), node_color=values)


    ax.set_xticks([])
    ax.set_yticks([])
  
def animate(T,k,path, num_frames = 2000, delay = 10):
    fig, ax = plt.subplots(figsize=(6,4))
    
    T = assign_heights(T,k)

    
    
    ani = matplotlib.animation.FuncAnimation(fig, update, frames=num_frames, interval=delay, repeat=True)
    plt.show()
    
def count_downward():
    
    sizes = []
    for k in [5]  :
        filename = './records' + str(k)
        f1=open(filename, 'w+')
        T = construct_doubled_tree(k)
        #M = build_metagraph_BFS(T)
        #print(len(M))
        value = just_count(T,f1)
        sizes.append(value)
        #print("SIZE WAS:" , value, file = f1)
        print("SIZE WAS", value)
        f1.close()
#if you can compute the correct distribution and display it, that will measure failure to mix. Deviation from symmetry also does this.

def make_grid(k):
    
    G = nx.grid_graph([k*2 + 2,k*2 + 2])
    for x in G:
        G.node[x]["level"] = x[1]
        if x[1] == k:
            G.node[x]["half"] = "M"
        if x[1] > k:
            G.node[x]["half"] = "H"
        if x[1] < k:
            G.node[x]["half"] = "G"
        G.name = "gridgraph"
        G.graph["depth"]= k
        G.node[x]["X"] = x[0]
        G.node[x]["Y"] = x[1]
    return G

def replace_edges(G,k):
    #takes a graph G and replaces the edges with depth k doubled trees.
    #This is to investigate the observation that because these doubled trees have an attractor at the maximally unbalanced partition, it is unlikely that that they produce a link through which connectivity can flow.
    
    T = construct_doubled_tree(k)
    T = assign_heights(T,k)

    #can also add the spokes construction
    H = copy.deepcopy(G)

    edge_list = list(H.edges())
    for e in edge_list:
        H.remove_edge(e[0], e[1])
        H = glue(H,T, e[0], e[1])
    return H
    
    
    
def glue(G,S,a,b):
    #G and S have vertices named a and b, we glue them together along these vertices. The nodes in the copy of S have a label that identifies the edge they came from.
    #We also compute X and Y coordinates for visualization
    y_values = [S.node[x]["Y"] for x in S.nodes()]
    x_values = [S.node[x]["X"] for x in S.nodes()]
    gadget_height = abs( max(y_values) - min(y_values) )
    gadget_width = abs( max(x_values) - min(x_values))
    top = [0, max(y_values)]
    
    #print([ G.node[b]["X"], G.node[b]["Y"]])
    mapping = {0 : a, '0G' : b}
    S = nx.relabel_nodes(S, mapping)

    vertex_set = set()
    edge_label = "(" + str(a) + ","+ str(b) + ")" + ":"
    label_mapping = {}
    for x in S.nodes():
        if x in [a,b]:
            label_mapping[x] = x
        else:
            label_mapping[x] = edge_label + str(x)
    inv_label_map = {v: k for k, v in label_mapping.items()}
    location_dictionary = {}
    for x in G.nodes():
        vertex_set.add(x)
        location_dictionary[x] = [ G.node[x]["X"], G.node[x]["Y"]]
    #print("before mess, loc dictionary", location_dictionary)
    for x in S.nodes():
        vertex_set.add( label_mapping[x])
        
        
        
        
        a_coord = np.array([ G.node[a]["X"], G.node[a]["Y"]])
        b_coord = np.array([ G.node[b]["X"], G.node[b]["Y"]])
        
        
        
        
        relative = np.array([S.node[x]["X"]/gadget_width, S.node[x]["Y"]]) - np.array(top)
        
        
        
        edge_base = a_coord
        edge_vector = b_coord - a_coord
        edge_length = np.linalg.norm(edge_vector)
        normalized_edge_vector = edge_vector / edge_length
        
        
        
        height_scaling = edge_length / gadget_height 
        #print(height_scaling)
        
        
        rotation = np.array([ [-1* normalized_edge_vector[1], normalized_edge_vector[0]], [ normalized_edge_vector[0],  normalized_edge_vector[1]]]) * -1
        

        rotated_vector = np.matmul(rotation, relative)

        absolute = (rotated_vector) * height_scaling + edge_base
        absolute = list(absolute)
        location_dictionary[x] = [ absolute[0], absolute[1]]
        #sanity check -- top and bottom should end up with location the same as the original a and b ... this might be what is going wrong, and the error is propagating.
        
        
        
        
        
    #print(location_dictionary)
    H = nx.Graph()
    H.add_nodes_from(vertex_set)
    for e in G.edges():
        H.add_edge(e[0], e[1])
    for e in S.edges():
        H.add_edge(label_mapping[e[0]], label_mapping[e[1]])
#    print(location_dictionary)
#    print(label_mapping)
#    print(H.nodes())
    #print("NODES: ", H.nodes())
    for x in H.nodes():
        if x in inv_label_map.keys():
            location = location_dictionary[inv_label_map[x]]
        else:
            location = location_dictionary[x]
        H.node[x]["X"] = location[0]
        H.node[x]["Y"] = location[1]

    inverse_mapping = {a : 0, b : '0G'}
    S= nx.relabel_nodes(S, inverse_mapping)
    return H
        
    

global T
k = 1
#G = make_grid()
#G = nx.Graph()
#G.add_node(-1)
#G.add_node(-2)
#G.add_edge(-1,-2)
#G.node[-1]["X"] = 0
#G.node[-1]["Y"] = 0
#G.node[-2]["X"] = -1
#G.node[-2]["Y"] = 1
G = make_grid(0)
H = replace_edges(G,3)


def draw_with_location(graph):
    for x in graph.nodes():
        graph.node[x]["pos"] = [graph.node[x]["X"], graph.node[x]["Y"]]

    nx.draw(graph, pos=nx.get_node_attributes(graph, 'pos'), node_size = 200/k, width = .5, cmap=plt.get_cmap('jet'))
    
draw_with_location(H)

path, T = make_path(k,100, H)
#Be cautious that the graph size is already growing exponentially -- what we are really looking for is double exponential growth in the cut off


#stat = balance
#stat_list = [stat(x) for x in path]
#make_time_series(path, stat)

#viz(T,k, path[1000])

#
#Pre animation speculation -- I suspect it wavers in balance until it grabs some crucial connector nodes, at which point the bias becomes hard to change...]
#
#Okay, it's not the connector nodes which are important -- it's a kind of stable configuration.

#animate(T,k,path,2000,10)

#fig, ax = plt.subplots(figsize=(3,3))
#
#T = assign_heights(T,k)
#def update(num):
#    ax.clear()
#
#    for x in T.nodes():
#        T.node[x]["pos"] = [T.node[x]["X"], T.node[x]["Y"]]
#    for x in T.nodes():
#        if x in path[num]:
#            T.node[x]["col"] = 1
#        else:
#            T.node[x]["col"] = 0
#    values = [T.node[x]["col"] for x in T.nodes()]
#    nx.draw(T, pos=nx.get_node_attributes(T, 'pos'), node_size = 200/k, width = .5, cmap=plt.get_cmap('jet'), node_color=values)
#
#
#    ax.set_xticks([])
#    ax.set_yticks([])
#
#
#ani = matplotlib.animation.FuncAnimation(fig, update, frames=num_frames, interval=delay, repeat=True)
#plt.show()
#
#ani.save('animation.gif', writer='ffmpeg', fps=60)
